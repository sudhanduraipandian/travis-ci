# Note: with `language: cpp`, `cache: ccache` works
# but `cache: pip` and `python:` is ignored
language: cpp
dist: trusty  # Ubuntu 14.04 LTS
sudo: required  # for docker
services:
- docker
cache:  # shared between builds
- ccache
- pip

# Currently commented out as set with environment flags
# Both clang and gcc can be tested. More is the better.
#compiler:
# - clang
# - gcc

# Environment variables
# Note: On trusty we need to build Armadillo and boost ourselves (the system versions are too old)
# Note: On OSX we can't test SYSTEM_Boost=OFF due to excessive log size (https://github.com/CCPPETMR/SIRF-SuperBuild/issues/167)
# Note: currently ACE is not building correctly, so ACE is not built on any configuration https://github.com/CCPPETMR/SIRF-SuperBuild/issues/#174
# Note: on Trusty, g++-7 causes errors with the system ACE, so cannot use g++-7 or later https://github.com/CCPPETMR/SIRF-SuperBuild/issues/169
# Note: altering the matrix here will cause re-building of caches,
# so try to keep this concise to avoid need to update
# Note: the line above each `env` contains a resume of the parameters passed to cmake.
#       + or - refer to the value of the parameter affecting the specific package is passed to cmake:
#       i.e. -boost == -DUSE_SYSTEM_Boost=OFF, which means that Boost will be built.
matrix:
 include:
 # linux g{cc,++}-6 py{27,3}
 - os: linux
   python: 3
   # -boost +fftw3 +hdf5 +ace
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=OFF -DUSE_SYSTEM_FFTW3=ON -DUSE_SYSTEM_HDF5=ON -DUSE_SYSTEM_ACE=ON" MATRIX_EVAL="CC=gcc-6 CXX=g++-6" PYMVER=3
 - os: linux
   python: 2.7
   # -boost +fftw3 +hdf5 +siemens_to_ismrmrd +swig +ace
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=OFF -DUSE_SYSTEM_FFTW3=ON -DUSE_SYSTEM_HDF5=ON -DBUILD_siemens_to_ismrmrd=ON -DUSE_SYSTEM_SWIG=ON -DUSE_SYSTEM_ACE=ON" MATRIX_EVAL="CC=gcc-6 CXX=g++-6" PYMVER=2
 - os: linux
   python: 3
   # +DEVEL -boost -hdf5 -fftw3 +ace +siemens_to_ismrmrd
   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=OFF -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_FFTW3=OFF -DUSE_SYSTEM_ACE=ON -DBUILD_siemens_to_ismrmrd=ON" MATRIX_EVAL="CC=gcc-6 CXX=g++-6" PYMVER=3
 - os: linux
   python: 2.7
   # +DEVEL -boost -fftw3 -hdf5 -swig +ace
   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=OFF -DUSE_SYSTEM_FFTW3=OFF -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_ACE=ON -DUSE_SYSTEM_SWIG=OFF" MATRIX_EVAL="CC=gcc-6 CXX=g++-6" PYMVER=2
 # osx g{cc,++} py{27,36}
 # - os: osx
 #   python: 2.7
 #   # +boost -hdf5 -swig
 #   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=OFF" MATRIX_EVAL="CC=gcc CXX=g++" PYMVER=2
 # - os: osx
 #   # +boost +fftw3 -hdf5 -swig
 #   python: 3
 #   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_FFTW3=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=OFF" MATRIX_EVAL="CC=gcc CXX=g++" PYMVER=3
 # - os: osx
 #   python: 2.7
 #   # +DEVEL +boost -hdf5 +swig
 #   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=ON" MATRIX_EVAL="CC=gcc CXX=g++" PYMVER=2
 # - os: osx
 #   python: 2.7
 #   # +DEVEL +boost -fftw3 -hdf5 +swig
 #   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_FFTW3=OFF -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=ON" MATRIX_EVAL="CC=gcc CXX=g++" PYMVER=2
 # itk
 - os: linux
   python: 3
   # -boost +itk +fftw3 +hdf5
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=OFF -DUSE_ITK=ON -DUSE_SYSTEM_FFTW3=ON -DUSE_SYSTEM_HDF5=ON" MATRIX_EVAL="CC=gcc-6 CXX=g++-6" PYMVER=3
 # - os: osx
 #   python: 2.7
 #   # +boost +itk -hdf5 +swig
 #   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_ITK=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=ON" MATRIX_EVAL="CC=gcc CXX=g++" PYMVER=2
 # docker
 - os: linux
   # +ace +armadillo +boost +fftw3 +hdf5 +itk +siemens_to_ismrmrd +swig
   env: DOCKER_BUILD=1
 - os: linux
   # +ace +armadillo +boost +fftw3 +hdf5 +itk +siemens_to_ismrmrd +swig
   env: DOCKER_BUILD=SERVICE
 - os: linux
   # +DEVEL +ace +armadillo +boost +fftw3 +hdf5 +itk +siemens_to_ismrmrd +swig
   env: DOCKER_BUILD=DEVEL
 # - os: linux
 #   # +DEVEL +ace +armadillo +boost +fftw3 +hdf5 +itk +siemens_to_ismrmrd +swig
 #   env: DOCKER_BUILD=DEVEL_SERVICE

env:
 global:
 - BUILD_FLAGS="-DCMAKE_BUILD_TYPE=Release"
 - MAKEFLAGS="-j 2"  # too many threads may crash

# Compilation dependencies
addons:
 apt:
  sources:
  - ubuntu-toolchain-r-test
  packages:
  - git-core
  - build-essential
  - g++-6
  - g++-7
  - libboost-all-dev
  - libhdf5-serial-dev
  - libfftw3-dev
  - python-dev
  - python3-dev
  - python-tk
  - python3-tk
  - libopenblas-dev
  - libatlas-base-dev
  - liblapack-dev
  - libxml2-dev
  - libarmadillo-dev
  - libgtest-dev
  - libplplot-dev
  - swig
  - ccache
  # for building ACE (note: Trusty only)
  - realpath
  # not in whitelist
  - libxslt-dev
  - libace-dev
  # - root-system-bin

before_install:
# Set C and C++ compiler etc using trick from
# https://docs.travis-ci.com/user/languages/cpp/#c11c11-and-beyond-and-toolchain-versioning
- eval "${MATRIX_EVAL}"
- $CC --version
- $CXX --version
- mkdir -p ~/.local/bin
- pushd ~/.local/bin
# Note: use ( set -ev; ... ) to echo commands and exit immediately on failure
# in compounds statements (note that export/cd etc won't persist).
- |
   if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
     brew update
     BUILD_FLAGS="$BUILD_FLAGS -DSHARED_LIBS_ABS_PATH=ON"
     brew install openblas
     # Get openblas version
     blas_ver=$(brew list --versions openblas)
     blas_ver=${blas_ver#"openblas "}
     EXTRA_BUILD_FLAGS="$EXTRA_BUILD_FLAGS -DCBLAS_INCLUDE_DIR=/usr/local/Cellar/openblas/${blas_ver}/include -DCBLAS_LIBRARY=/usr/local/Cellar/openblas/${blas_ver}/lib/libblas.dylib"
     if [ $PYMVER == 2 ]; then
       PYINST=/System/Library/Frameworks/Python.framework/Versions/$PYMVER.7
       PY_EXE=$PYINST/bin/python2.7
       # Next lines are not necessary if we give the actual path for the executable to cmake
       #BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_LIBRARY=$PYINST/lib/libpython2.7.dylib"
       #BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_INCLUDE_DIR=$PYINST/include/python2.7"
     else
       brew upgrade python || true # don't fail if upgrading doesn't do anything
       # find exact location of Python executable to pass to CMake
       # we attempt to find the last one if there are multiple Python 3 versions installed
       PY_INST=$(ls -d1 /usr/local/Cellar/python/$PYMVER.*/Frameworks/Python.framework/Versions/$PYMVER.*|tail -n 1)
       PYMVER=$(basename ${PY_INST})
       PY_EXE=$PY_INST/bin/python$PYMVER
       if [ ! -x "$PY_EXE" ]; then
         echo "Something wrong with finding Python executable for OSX"
         echo "PY_EXE = $PY_EXE"
         travis_terminate 1
       fi
       # Next lines are not necessary if we give the actual path for the executable to cmake
       #PY_LIB=$PY_INST/Python
       #PY_INC=$PY_INST/Headers
       # BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_LIBRARY=$PY_LIB -DPYTHON_INCLUDE_DIR=$PY_INC"
     fi
     BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_EXECUTABLE=$PY_EXE"
     ( set -ev
       # boost is already installed but 1.65 doesn't work so update
       brew reinstall boost
       # we currently need boost-python
       # brew install boost-python
       brew install ace
       brew install swig
       brew install ccache
       if [[ $EXTRA_BUILD_FLAGS == *"SYSTEM_FFTW3=ON"* ]]; then
           brew install fftw
       else
           echo "Not installing FFTW as we are building it"
       fi
       # need curl to get pip and more recent cmake
       brew install curl
       #brew install cmake # already present
       # alternative: get our own
       #curl -L -O https://github.com/Kitware/CMake/releases/download/v3.13.4/cmake-3.13.4-Darwin-x86_64.tar.gz
       #tar xzf cmake-*.tar.gz
       #mv cmake-*/CMake.app/Contents/* cmake
       #export PATH="$PWD/cmake/bin:$PATH"
     )
   elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
     PY_EXE=python$PYMVER
     if [[ -z "$DOCKER_BUILD" ]]; then
       curl -o cmake.tgz -L https://github.com/Kitware/CMake/releases/download/v3.13.4/cmake-3.13.4-Linux-x86_64.tar.gz
       tar xzf cmake.tgz && rm cmake.tgz
       ln -s cmake-*x86_64 cmake
       export PATH="$PWD/cmake/bin:$PATH"
     fi
   fi
- echo "Using Python executable $PY_EXE"
# get pip
- curl -0 https://bootstrap.pypa.io/get-pip.py -o get-pip.py
- $PY_EXE get-pip.py --user
# setuptools may be out of date on osx
- $PY_EXE -m pip install --user -U pip setuptools wheel
# ensure python bin dir exists (and coverage dependencies installed)
- $PY_EXE -m pip install --user -U nose codecov coveralls
# for counting clones, excluding ours
- |
   if [[ -n "$GITHUB_API_TOKEN" ]]; then
     git clone https://$GITHUB_API_TOKEN@github.com/ccp-petmr-codebot/github-stats --branch $TRAVIS_REPO_SLUG
     # update with last fortnight's clones from GitHub API
     source github-stats/setup.sh
     # count unique clones, excluding travis, and print total
     gh_stats_count -k uniques
   fi
- $PY_EXE --version
- $PY_EXE -m pip --version
- $PY_EXE -m pip freeze
# ccache compiler override
- ln -s "$(which ccache)" g++
- ln -s "$(which ccache)" g++-6
- ln -s "$(which ccache)" g++-7
- ln -s "$(which ccache)" gcc
- ln -s "$(which ccache)" gcc-6
- ln -s "$(which ccache)" gcc-7
- export PATH="$PWD:$PATH"
- popd
# N.B.: don't put into build matrix to allow caching.
- BUILD_FLAGS="$BUILD_FLAGS -DPYVER=$PYMVER"
- cmake --version

install:
- |
   if [[ -n "$DOCKER_BUILD" ]]; then
     cd docker
     export DCC="docker-compose -p "travis_${TRAVIS_JOB_NUMBER/./_}" -f $PWD/docker-compose.yml"
     [[ "$DOCKER_BUILD" == *"DEVEL"* ]] && export DCC="$DCC -f $PWD/docker-compose.devel.yml"
     [[ "$DOCKER_BUILD" == *"SERVICE"* ]] && export DCC="$DCC -f $PWD/docker-compose.srv.yml"
     ( set -ev
       # pull previous base image for its layer cache
       docker pull ccppetmr/sirf:core
       # count the docker pull (prefix `d`)
       [[ -n "$GITHUB_API_TOKEN" ]] && gh_stats_count -k uniques --decrement -pd
       # rebuild base image (using above docker cache)
       # and sirf image (with travis' ccache)
       rm -rf devel/.ccache
       if [[ -n "$DOCKER_RECREATE_CCACHE" ]]; then
         mkdir devel/.ccache
         sudo rm -rf ~/.ccache
       else
         mv ~/.ccache devel/
       fi
       $DCC build --pull core
       # don't count the extra clone we're about to do
       # TODO: Do we need this? Is docker a distinct cloner from travis?
       # cloners_count_decrement
       $DCC build sirf
       # extract updated ccache
       sudo rm -rf devel/.ccache/*
       $DCC run --rm sirf /bin/bash -c 'sudo cp -a /opt/ccache/* /devel/.ccache/'
       # replace travis' ccache with the built images's
       mv devel/.ccache ~
     )
   else
     ( set -ev
       $PY_EXE -m pip install --user --only-binary=numpy,scipy,matplotlib numpy scipy matplotlib
       cmake $BUILD_FLAGS $EXTRA_BUILD_FLAGS .
       # Job may timeout (>50min) if no ccache, otherwise should be <1min:
       make
       mv INSTALL/share/gadgetron/config/gadgetron.xml.example INSTALL/share/gadgetron/config/gadgetron.xml
     ) || travis_terminate 1
     source $PWD/INSTALL/bin/env_ccppetmr.sh
   fi

script:
- |
   if [[ -n "$DOCKER_BUILD" ]]; then
     # run tests within the container
     $DCC run --rm sirf /bin/bash --login -c '/devel/test.sh 1'
   else
     ./INSTALL/bin/gadgetron >& gadgetron.log&
     # print for debugging
     cat builds/SIRF/build/CMakeCache.txt
     ctest --output-on-failure; test_fail=$?
     # echo "----------- Killing gadgetron server"
     # killall gadgetron
     if [[ $test_fail -ne 0 ]]; then
       #echo "----------- Test output"
       # cat builds/SIRF/build/Testing/Temporary/LastTest.log
       echo "----------- Last 70 lines of gadgetron.log"
       tail -n 70 gadgetron.log
       travis_terminate $test_fail
     fi
   fi

after_success:
- |
   # push images
   if [[ -n "$DOCKER_BUILD" && "$TRAVIS_SECURE_ENV_VARS" == true ]]; then ( set -ev
    echo "$DOCKER_PWD" | docker login -u $DOCKER_USR --password-stdin
    dpush() {
      # create and push alias $1 -> $2
      if [[ "$1" != "$2" ]]; then
        docker tag ccppetmr/sirf:$1 ccppetmr/sirf:$2
      fi
      docker push ccppetmr/sirf:$2
    }
    if [[ -n "$TRAVIS_TAG" ]]; then ( set -ev
     # tag & push
     case "$DOCKER_BUILD" in
     1)
       dpush latest latest
       dpush latest "$TRAVIS_TAG"
       dpush latest release
       ;;
     DEVEL)
       ;;
     DEVEL_SERVICE)
       ;;
     SERVICE)
       dpush service service
       dpush service "$TRAVIS_TAG"-service
       dpush service release-service
       ;;
     *)
       exit 1
     esac
    ); elif [[ "$TRAVIS_BRANCH" == master ]]; then ( set -ev
     # tag & push
     case "$DOCKER_BUILD" in
     1)
       dpush core core
       ;;
     DEVEL)
       dpush devel devel
       ;;
     DEVEL_SERVICE)
       dpush service devel-service
       ;;
     SERVICE)
       ;;
     *)
       exit 1
     esac
    ); fi
   ); fi

# post to slack.com
notifications:
 slack:
  rooms:
   - secure: "ZSBIUaNNQ7925etI0EtB+S5DnU++htNPUQYr78Lv8chhpx/2wTjFCxc7nVLhUHuqAblTnL2UkJj/f6rPecd+StgUBZcZboEIxYxju53xvi3pW7IdkzSNPYcFMQvyRpk562d9VUzK+iaOxdQaXyqEttCHTJNP4P2AcSILuRZPiNVk673lFXq8s8Hkhui64WzGkA5rPh1H6DObDoynME4MyuBRjygslCKBn5DiejTq2xhKdyIe6q+Nd1Vd456shcUNCgnbsrpq6Ik1tIUDBs+lCYvBN/ST6HfisL1cUNOqM0rVhNJBVNWVMOpGwkoKMfN5ZFl90HXiB9MGI7WDU7tzvdvFN/nsjfXBPAEYIvdHx6RkIIn2GeoAO9S9UZiyUNThjxs9jg7TJdLPaow1PIbLRrNi4WXpE4PYYzc7krGsZgIlhBx4SfMOXT7PLUevGOumRVetyddbVRIhJ6v92h29joQuwSKim2bVsOyznbTyLqn0ysIkqTD7aLov09Sh7Ni8VzVN/sWtlinzk1jIzpL4NxEzWKHL58q2lddyE6kD7FZCxw7dIdIMy3V84zt9oRzGNXETgzi5ClHXkHyYjoOGBbySG4v3Letlai0m0vhFvPGHhk8KZzyR9OUPJ6XZcmIdr5QJb4Nlc1b8r4INn7BNOiRAo4GSk1NJKze1gjdV6Ig="
  on_success: change
  on_failure: always
