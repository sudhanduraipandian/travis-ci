dist: trusty
sudo: false

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - gcc-4.9
    - g++-4.9
    - cmake3

cache:
  directories:
  - $HOME/libdynd/build

matrix:
  include:
    - compiler: gcc
      env: -fsanitize=address
      cache:
        directories:
            - $HOME/intel
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - cmake3
            - doxygen
      before_install:
        - export CC="gcc-5"
        - export CXX="g++-5"
      script:
        # Explicitly tell gcc to use the gold linker for the
        # address sanitization run to work around the bug described in
        # https://stackoverflow.com/q/37603238/1935144
        - cmake -DCMAKE_CXX_FLAGS="-fsanitize=address -fuse-ld=gold" ..
        - make -j4 || exit 1
        - ./tests/test_libdynd
    - compiler: clang
      env: CLANG_VERSION=3.9
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-3.9
          packages:
            - clang-3.9
            - gcc-4.9
            - g++-4.9
            - cmake3
      before_script:
        - export CC=clang-3.9
        - export CXX=clang++-3.9
        - mkdir build
        - pushd build
        - cmake ..
    - compiler: clang
      env: CLANG_VERSION=4.0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
          packages:
            - clang-4.0
            - gcc-5
            - g++-5
            - cmake3
      before_script:
        - export CC=clang-4.0
        - export CXX=clang++-4.0
        - mkdir build
        - pushd build
        - cmake ..
    - compiler: clang
      env: CLANG_VERSION=5.0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
            - gcc-6
            - g++-6
            - cmake3
      before_script:
        - export CC=clang-5.0
        - export CXX=clang++-5.0
        - mkdir build
        - pushd build
        - cmake ..
    - compiler: clang
      env: CLANG_VERSION=6.0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
          packages:
            - clang-6.0
            - gcc-7
            - g++-7
            - cmake3
      before_script:
        - export CC=clang-6.0
        - export CXX=clang++-6.0
        - mkdir build
        - pushd build
        - cmake ..
    - compiler: gcc
      env: CONDA=true
      before_install:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
        - bash Miniconda3-latest-Linux-x86_64.sh -b
        - export PATH=$HOME/miniconda3/bin:$PATH
        - conda install --yes conda-build jinja2 cmake
      before_script:
        - export CC="gcc-4.9"
        - export CXX="g++-4.9"
      script:
        - conda build conda.recipe
        - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then conda install --yes anaconda-client; fi'
        - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then anaconda --token $ANACONDA_TOKEN upload `conda build --output conda.recipe` --user dynd --channel dev; fi'
    - compiler: gcc
      env: GCC_VERSION=6
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - cmake3
      before_script:
        - export CC="gcc-6"
        - export CXX="g++-6"
        - mkdir build
        - pushd build
        - cmake ..
    - language: objective-c
      os: osx
      osx_image: xcode6.4
      compiler: clang
      env: CONDA=true
      addons:
      before_script:
      before_install:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
        - bash Miniconda3-latest-MacOSX-x86_64.sh -b
        - export PATH=$HOME/miniconda3/bin:$PATH
        - conda install --yes conda-build jinja2
      script:
        - conda build conda.recipe
        - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then conda install --yes anaconda-client; fi'
        - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then anaconda --token $ANACONDA_TOKEN upload `conda build --output conda.recipe` --user dynd --channel dev; fi'
    - language: python
      env: VERBOSE=1
      compiler: gcc
      python: 3.5
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - cmake3
      cache:
      directories:
        - $HOME/.cache/pip
        - $HOME/dynd-python/build
      before_install:
        - export CC=gcc-6
        - export CXX=g++-6
        - travis_retry pip install --install-option="--no-cython-compile" Cython==0.24
      before_script:
        - cd ..
        - travis_retry git clone --depth=1 https://github.com/libdynd/dynd-python.git
        - mv libdynd dynd-python/libdynd
        - cd dynd-python
      script:
        - python setup.py install
        - cd ..
        - python -c "import dynd; dynd.test(verbosity=2, exit=True)"
      after_script:
    - compiler: gcc
      env: DYND_COVERAGE=ON
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - cmake3
            - lcov
      before_install:
        - export CC="gcc-6"
        - export CXX="g++-6"
        - gem install coveralls-lcov
        - wget https://github.com/linux-test-project/lcov/archive/v1.12.zip
        - unzip v1.12.zip
        - export PATH=${PWD}/lcov-1.12/bin:$PATH
        - cp /usr/bin/gcov-6 ${PWD}/lcov-1.12/bin/gcov
      before_script:
        - mkdir build
        - pushd build
        - cmake -DDYND_COVERAGE=${DYND_COVERAGE} ..
      script:
        - make || exit 1
        - make coverage
      after_script:
        - popd
        - coveralls-lcov build/coverage.info.cleaned
  allow_failures:
  - language: python

language: cpp

before_script:
  - mkdir build
  - pushd build
  - cmake ..

script:
  - make -j4 || exit 1
  - ./tests/test_libdynd

notifications:
  email: false
  on_success: change
  on_failure: always
