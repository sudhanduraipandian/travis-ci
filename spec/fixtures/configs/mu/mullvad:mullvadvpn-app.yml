sudo: false

git:
  submodules: false

before_install:
  - git submodule update --init

matrix:
  include:
    # GUI - Electron
    - language: node_js
      node_js: '8'
      cache: npm
      install:
        - cd gui
        - npm install
      before_script:
        - export DISPLAY=:99.0; sh -e /etc/init.d/xvfb start
      script:
        - npm run check-format
        - npm run lint
        - npm run build
        - npm test

    # Android
    - language: android
      sudo: true
      android:
        components:
          - android-28
          - build-tools-28.0.3
      install:
        - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
        - source $HOME/.cargo/env
        - rustup target add aarch64-linux-android
        - curl -sf -L -o /tmp/ndk.zip https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip
        - sudo mkdir /opt/android
        - sudo unzip -q -d /opt/android/ /tmp/ndk.zip
        - sudo /opt/android/android-ndk-r19b/build/tools/make-standalone-toolchain.sh --platform=android-28 --arch=arm64 --install-dir=/opt/android/toolchains/android28-aarch64
        - |
            cat >> $HOME/.cargo/config << EOF
            [target.aarch64-linux-android]
            ar = "/opt/android/android-ndk-r19b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar"
            linker = "/opt/android/android-ndk-r19b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang"
      before_script:
        - export RUSTFLAGS="--deny unused_imports --deny dead_code"
        - export AR_aarch64_linux_android=/opt/android/toolchains/android28-aarch64/bin/aarch64-linux-android-ar
        - export CC_aarch64_linux_android=/opt/android/toolchains/android28-aarch64/bin/aarch64-linux-android28-clang
        - source env.sh android
        - env
      script:
        - cargo build --target aarch64-linux-android --verbose
        - cd android
        - ./gradlew --console plain assembleDebug

    # Daemon - macOS
    - language: rust
      rust: stable
      os: osx
      before_script: &rust_before_script
        - source env.sh
        - export RUSTFLAGS="--deny unused_imports --deny dead_code"
        - env
      script: &rust_script
        - cargo build --verbose
        - cargo test --verbose

    # Daemon - Linux
    - language: rust
      rust: nightly
      os: linux
      addons: &rust_linux_addons
        apt:
         sources:
          - sourceline: "ppa:jonathonf/gcc-7.3"
            key_url: "https://pgp.key-server.io/download/0xE03043828C3FF4BB"
         packages:
          - binutils
          - libdbus-1-dev
      before_script: *rust_before_script
      script:
        - cargo build --verbose
        - cargo test --verbose
        # Install and run rustfmt on nightly only until rustfmt.toml settings are stabilized.
        - rustup component add rustfmt-preview
        - cargo fmt --version || true
        - cargo fmt -- --check --unstable-features

    - language: rust
      rust: beta
      os: linux
      addons: *rust_linux_addons
      before_script: *rust_before_script
      script: *rust_script

    - language: rust
      rust: stable
      os: linux
      addons: *rust_linux_addons
      before_script: *rust_before_script
      script: *rust_script


notifications:
  email:
    on_success: never
    on_failure: never
