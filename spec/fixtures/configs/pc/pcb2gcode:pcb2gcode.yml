language: cpp
sudo: false

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          packages: ['libgtkmm-2.4-dev', 'gerbv', 'moreutils', 'autopoint']
      env: COMPILER=g++-4.8 BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: linux
      compiler: gcc
      addons:
        apt:
          packages: ['libgtkmm-2.4-dev', 'gerbv', 'moreutils', 'autopoint']
      env: COMPILER=g++-4.8 BOOST=1_66_0

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'libgtkmm-2.4-dev', 'gerbv', 'moreutils', 'autopoint']
      env: COMPILER=g++-7 BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'libgtkmm-2.4-dev', 'lcov', 'ggcov', 'autopoint', 'automake', 'moreutils']
      env: COMPILER=g++-7 BOOST=1_66_0 ENABLE_CODE_COVERAGE="--enable-code-coverage"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'libgtkmm-2.4-dev', 'gerbv', 'moreutils', 'autopoint']
      env: COMPILER=g++-7 BOOST=1_66_0

    - os: linux
      compiler: clang
      addons:
        apt:
          packages: ['libgtkmm-2.4-dev', 'gerbv', 'moreutils', 'autopoint']
      env: COMPILER=clang++ BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: linux
      compiler: clang
      addons:
        apt:
          packages: ['libgtkmm-2.4-dev', 'gerbv', 'moreutils', 'autopoint']
      env: COMPILER=clang++ BOOST=1_66_0

    - os: osx
      compiler: gcc
      env: COMPILER=g++ BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: osx
      compiler: clang
      env: COMPILER=clang++ BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew update &&
      brew reinstall -s libtool &&
      brew install boost@1.60 &&
      brew install gtkmm gerbv moreutils &&
      brew install librsvg &&
      export BOOST_DIR="/usr/local/opt/boost@1.60" &&
      export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:"/usr/local/opt/libffi/lib/pkgconfig";
    fi
  - >
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      pushd ~ &&
      for i in {1..5}; do
        wget -T20 -t1 -O "boost_${BOOST}.tar.bz2" "https://github.com/pcb2gcode/pcb2gcode/releases/download/v2.0.0/boost_${BOOST}.tar.bz2" && break;
      done &&
      tar xjf "boost_${BOOST}.tar.bz2" &&
      pushd boost_${BOOST} &&
      export BOOST_DIR="$HOME/boost" &&
      ./bootstrap.sh --with-libraries=program_options --prefix=${BOOST_DIR} &&
      chronic ./b2 install &&
      popd &&
      popd
    fi
  - >
    if [ "$SKIP_GERBERIMPORTER_TESTS" != "1" ]; then
      mkdir -p $HOME/.local &&
      export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HOME/.local/lib/pkgconfig &&
      pushd ~
      git clone git://git.geda-project.org/gerbv.git &&
      pushd gerbv &&
      git checkout 061240c &&
      chronic sh autogen.sh &&
      CFLAGS=-std=gnu99 chronic ./configure --disable-update-desktop-database --prefix=${HOME}/.local &&
      chronic make -j 2 &&
      chronic make install &&
      popd &&
      popd &&
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.local/lib;
    fi
  - >
    if [ "${ENABLE_CODE_COVERAGE}" ]; then
      pip install --user cpp-coveralls colour_runner unittest2 termcolor concurrencytest in_place;
    fi
  - >
    for i in {1..5}; do
      wget -T5 -t1 -O "parallel-latest.tar.bz2" "http://ftpmirror.gnu.org/parallel/parallel-latest.tar.bz2" && break;
    done &&
    tar xjf "parallel-latest.tar.bz2" &&
    export CXX="$COMPILER"

script:
  - autoreconf -fvi || travis_terminate 1
  - >
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      ./configure --disable-dependency-tracking --disable-silent-rules "${ENABLE_CODE_COVERAGE}" --with-boost="$BOOST_DIR";
    fi || travis_terminate 1
  - >
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      ./configure --disable-dependency-tracking --disable-silent-rules --with-boost="$BOOST_DIR" --enable-static-boost "${ENABLE_CODE_COVERAGE}";
    fi || travis_terminate 1
  - chronic make -j 2 || travis_terminate 1
  - pushd testing/gerbv_example/ || travis_terminate 1
  - ARGS='--bridges=0.5 --bridgesnum=2 --zbridges=-0.6 --al-front=true --al-back=true --al-probefeed=100 --al-x=15.0000 --al-y=15.0000 --tile-x=3 --tile-y=2' || travis_terminate 1
  - >
    if [[ ! "${ENABLE_CODE_COVERAGE}" ]]; then  # We don't want to count this in coverage because there are no tests.
      ls | ../../parallel-*/src/parallel -j 2 --halt soon,fail=1 "pushd {}; echo 'Running on {}' ; time ../../../pcb2gcode || exit ; popd";
    fi || travis_terminate 1
  - popd || travis_terminate 1
  - lcov --directory . -z || true #Ignore errors
  - VERBOSE=1 SKIP_GERBERIMPORTER_TESTS_PNG=1 make -j 2 check || travis_terminate 1
  - if [ "${ENABLE_CODE_COVERAGE}" ]; then ./integration_tests.py; fi || travis_terminate 1

after_success:
  - >
    if [ "${ENABLE_CODE_COVERAGE}" ]; then
      coveralls --verbose --gcov gcov-7 --gcov-options '\-lpr' -E ".*_tests.cpp";
    fi
