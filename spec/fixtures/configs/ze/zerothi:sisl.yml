language: minimal
sudo: false

# Manage sub-modules manually
git:
  submodules: false
#  lfs_skip_smudge: true

# Reduce bandwidth usage for Git-LFS
# see https://github.com/travis-ci/travis-ci/issues/8787#event-1875343357
#cache:
#  directories:
#    - .git/lfs

branches:
  except:
  - /.*gh-pages.*/

notifications:
  email:
     recipients:
       - nickpapior@gmail.com
     on_failure: always
     on_success: change
  webhooks:
     urls:
       - https://webhooks.gitter.im/e/fa6dc002908da5678b5f
     on_success: change
     on_failure: always
     on_start: never

matrix:
  include:
   - env:
     - CONDA_ENV=py27
   - env:
     - CONDA_ENV=py27-opt
     - OPTIONAL_DEPENDENCIES=true
   - env:
     - CONDA_ENV=py36
   - env:
     - CONDA_ENV=py36-opt
     - OPTIONAL_DEPENDENCIES=true

before_install:
  - |
    if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.anaconda.com/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh ;
    else
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh ;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH=$HOME/miniconda/bin:$PATH
  - hash -r
  - conda config --set always_yes yes --set changeps1 no --set show_channel_urls true
  # Do actual package installations
  #- conda update -q conda
  - conda info -a
  - | # In case we have optional dependencies, also download the sisl-files submodule to test large files
    if [[ ${OPTIONAL_DEPENDENCIES:-false} == true ]]; then
       export SISL_FILES_TESTS=$(pwd)/files/tests ;
       git submodule update --init files ;
    fi


install:
  - conda env create -n test_env --file ci/requirements-$CONDA_ENV.yml
  - source activate test_env
  - conda info --envs
  - conda list
  # conda-forge is adopting a new scheme...
  # When loading their modules the used binaries for compilation
  # are available through env-vars.
  # I.e.
  # gfortran may be found under these flags:
  #  GFORTRAN
  #  FC
  #  F77
  #  F90
  # This is also the same for gcc which goes (only) under the name:
  #  GCC
  # To be sure we have the correct flags, we do:
  - export CC=$GCC
  - export FC=$GFORTRAN
  - export F77=$GFORTRAN
  - export F90=$GFORTRAN
  - $CC --version
  - $FC --version
  - python -c 'import sys ; print(sys.version)'
  # verbose (max-out)
  # We should let numpy use the LDFLAGS
  - unset LDFLAGS
  - pip install --no-deps -v -v -v -e .

script:
  - which python
  - python --version
  # Check that compiling without __doc__ works!
  - python -OO -c "import sisl"
  - |
    if [[ ${COVERAGE:-true} == true ]]; then
        echo "Running coverage tests..." ;
        py.test --pyargs sisl -rX --cov=sisl --cov-report term-missing --cov-config=.coveragerc ;
    else
        echo "Running non-coverage tests..." ;
        py.test --doctest-modules sisl ;
        py.test --pyargs sisl -rX ;
    fi

after_success:
  - coveralls
  - |
    if [[ ${COVERAGE:-true} == true ]]; then
       bash <(curl -s https://codecov.io/bash) ;
       python-codacy-coverage -r coverage.xml ;
    fi

before_script:
  - |
    if [[ $TRAVIS_OS_NAME != 'osx' ]]; then
        export DISPLAY=:99.0 ;
        sh -e /etc/init.d/xvfb start ;
        sleep 2 ;
    fi
  # Try and force the simplest back-end...
  - export MPLBACKEND=Agg

